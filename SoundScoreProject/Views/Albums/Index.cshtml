@model IEnumerable<SoundScore.Data.Entities.Album>

@{
    ViewData["Title"] = "Album Search";
}

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">

<style>
    /* General Styles */
    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f8f9fa;
        color: #333;
    }

    .navbar {
        background-color: #343a40; /* Dark navbar */
    }

    .navbar-brand, .navbar-nav .nav-link {
        color: white;
    }

        .navbar-brand:hover, .navbar-nav .nav-link:hover {
            color: #17a2b8;
        }

    /* Main Container */
    .main-container {
        display: flex;
        flex-direction: column;
        min-height: 100vh; /* Ensures the container takes up at least the full viewport height */
    }

    /* Search Area */
    .search-hero {
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        padding: 40px 0;
        text-align: center;
        /* No margin-bottom here */
    }

        .search-hero h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }

    .search-container {
        max-width: 800px;
        margin: 0 auto;
    }

    #searchForm .form-control-lg {
        border-radius: 50px 0 0 50px;
    }

    #searchForm .btn-lg {
        border-radius: 0 50px 50px 0;
        background-color: #fff;
        color: #764ba2;
        border: 2px solid #fff;
        font-weight: 600;
        transition: all 0.3s ease;
    }

        #searchForm .btn-lg:hover {
            background-color: #764ba2;
            color: #fff;
            border-color: #764ba2;
        }

    /* Results Area */
    #resultsContainer {
        flex-grow: 1; /* Takes up remaining space */
        padding: 2rem;
    }

    /* Album Grid */
    .album-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 1.5rem;
        /* No padding here - it's on the resultsContainer */
    }

    .album-card {
        border: 1px solid #ddd;
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.2s, box-shadow 0.2s;
        background: white;
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
    }

        .album-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

    .album-image-wrapper {
        position: relative;
        width: 100%;
        height: 220px;
        background-color: #f4f4f4;
        overflow: hidden;
    }

    .album-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: opacity 0.5s ease-in-out;
    }

    .album-info {
        padding: 1rem;
    }

        .album-info h5 {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #444;
        }

        .album-info p {
            margin-bottom: 5px;
        }

    .text-muted {
        color: #6c757d;
        font-size: 0.9rem;
    }

    .btn-outline-primary {
        color: #764ba2;
        border-color: #764ba2;
        padding: 0.25rem 0.75rem;
        font-size: 0.85rem;
        border-radius: 20px;
    }

        .btn-outline-primary:hover {
            background-color: #764ba2;
            color: #fff;
            border-color: #764ba2;
        }

    /* Loading and No Results */
    .loading-spinner {
        display: none;
        text-align: center;
        padding: 2rem;
    }

    .loading.loading-spinner {
        display: block;
    }

    .text-center {
        text-align: center;
    }

    .mt-4 {
        margin-top: 1rem;
    }
    /* Footer Styles */
    footer {
        background-color: #343a40;
        color: #fff;
        padding: 20px 0;
        text-align: center;
        width: 100%; /* Ensure full width */
    }

        footer p {
            margin: 2px 0;
        }

</style>

<nav class="navbar navbar-expand-lg">
    <div class="container">
        <a class="navbar-brand" href="/">SoundScore</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/">Home <span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item active">
                    <a class="nav-link" href="/Albums">Browse Albums</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">About</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Contact</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="main-container">
    <div class="search-hero">
        <div class="container">
            <h1>Search Albums</h1>
            <form method="get" id="searchForm" class="d-flex gap-2">
                <input type="text"
                       name="searchTerm"
                       id="searchInput"
                       class="form-control form-control-lg"
                       placeholder="Search for albums..."
                       value="@ViewBag.SearchTerm" />
                <button type="submit" class="btn btn-primary btn-lg">Search</button>
            </form>
        </div>
    </div>

    <div id="resultsContainer" class="container">
        @* Loading Spinner (Initially Hidden) *@
        <div class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        @* Album Grid (if results) *@
        @if (Model?.Any() == true)
        {
            <div class="album-grid">
                @foreach (var album in Model)
                {
                    <div class="album-card">
                        <div class="album-image-wrapper">
                            <img src="@album.CoverImageUrl"
                                 alt="@album.Title cover"
                                 class="album-image"
                                 loading="lazy"
                                 onerror="this.src='/images/no-cover.png'" />
                        </div>
                        <div class="album-info">
                            <h5 class="mb-1">@album.Title</h5>
                            <p class="text-muted mb-2">@album.Artist.Name</p>
                            <p class="small mb-1">Released: @album.ReleaseDate.ToString("MMMM dd, yyyy")</p>
                            <a href="@Url.Action("Rate", "Albums", new { id = album.Id })"
                               class="btn btn-outline-primary btn-sm">Rate Album</a>
                        </div>
                    </div>
                }
            </div>
        }
        @* No Results Message *@
        else if (ViewBag.SearchTerm != null)
        {
            <div class="text-center mt-4">
                <p>No albums found matching your search.</p>
            </div>
        }
    </div>
    <footer>
        <div class="container">
            <p>© 2023 SoundScore. All rights reserved.</p>
            <p>© 2023 - SoundScore - <a href="/Privacy" style="color: white; text-decoration: underline;">Privacy</a></p>
        </div>
    </footer>
</div>



@section Scripts {
    <script>
        document.getElementById('searchForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const container = document.getElementById('resultsContainer');
            const searchTerm = document.getElementById('searchInput').value;

            container.classList.add('loading');

            try {
                const response = await fetch(`/Albums/SearchApi?query=${encodeURIComponent(searchTerm)}`);
                if (!response.ok) throw new Error('Search failed');

                const albums = await response.json();

                // Filter out albums with invalid or missing image URLs
                const validAlbums = albums.filter(album => album.coverImageUrl && album.coverImageUrl !== '/images/no-cover.png');

                // Only render albums if we have valid ones
                if (validAlbums.length > 0) {
                    container.innerHTML = `
                                        <div class="album-grid">
                                            ${validAlbums.map(album => `
                                                <div class="album-card">
                                                    <div class="album-image-wrapper">
                                                        <img src="${album.coverImageUrl}"
                                                             alt="${album.title} cover"
                                                             class="album-image"
                                                             loading="lazy" />
                                                    </div>
                                                    <div class="album-info">
                                                        <h5 class="mb-1">${album.title}</h5>
                                                        <p class="text-muted mb-2">${album.artist.name}</p>
                                                        <p class="small mb-1">Released: ${new Date(album.releaseDate).toLocaleDateString()}</p>
                                                        <a href="/Albums/Rate/${album.id}" class="btn btn-outline-primary btn-sm">Rate Album</a>
                                                    </div>
                                                </div>
                                            `).join('')}
                                        </div>
                                    `;
                } else {
                    container.innerHTML = '<div class="text-center mt-4"><p>No albums found matching your search.</p></div>';
                }
            } catch (error) {
                container.innerHTML = `
                                        <div class="alert alert-danger mt-4" role="alert">
                                            An error occurred while searching. Please try again.
                                        </div>
                                    `;
            } finally {
                container.classList.remove('loading');
            }
        });
    </script>
}